创建自定义的View类

设计良好的类总是相似的。它使用一个好用的接口来封装一个特定的功能，它有效的使用CPU与内存，等等。为了成为一个设计良好的类，
自定义的view应该:遵守Android标准规则。
1>提供自定义的风格属性值并能够被Android XML Layout所识别。
2>发出可访问的事件。
3>能够兼容Android的不同平台。

创建自定义View的两种方式
方式一:直接继承View
方式二:继承既有的一个子类(例如Button)

第一种方式:直接继承View
实现步骤：
1.创建一个view
2.为你的view在资源标签下定义自设的属性
3.在你的XML layout中指定属性值
4.在运行时获取属性值
5.把获取到的属性值应用在你的view上


1.创建一个view
为了允许Android Developer Tools能够识别你的view，你必须至少提供一个constructor，它包含一个Context与一个AttributeSet对象作为参数。这个constructor允许layout editor创建并编辑你的view的实例。

class PieChart extends View {
 public PieChart(Context context, AttributeSet attrs) {
 super(context, attrs);
 }
}


2.为你的view在资源标签下定义自设的属性
为了定义自设的属性，添加 资源到你的项目中。放置于res/values/attrs.xml文件中。下面是一个attrs.xml文件的示例:

<declare-styleablename="PieChart">
<attrname="textcolor"format="color"/>
<attrname="textsize"format="dimension"/>
<attrname="content"format="string"/>
<attrname="showTexts"format="boolean"/>
<attrname="tabBackground"format="reference"/>
<attrname="labelPosition"format="enum">
<enumname="left"value="0"/>
<enumname="right"value="1"/>
</attr>
</declare-styleable>
上面的代码声明了6个自设的属性，showText与labelPosition，它们都归属于PieChart的项目下的styleable实例。styleable实例的名字，通常与自定义的view名字一致。尽管这并没有严格规定要遵守这个convention，但是许多流行的代码编辑器都依靠这个命名规则来提供statement completion。


3.在你的XML layout中指定属性值
一旦你定义了自设的属性，你可以在layout XML文件中使用它们。唯一不同的是你自设的属性是归属于不同的命名空间。不是属于http://schemas.android.com/apk/res/android的命名空间，它们归属于http://schemas.android.com/apk/res/[your package name]。例如，下面演示了如何为PieChart使用上面定义的属性：

<xml version="1.0" encoding="utf-8">
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
 xmlns:custom="http://schemas.android.com/apk/res/com.example.customviews">
 <com.example.customviews.charting.PieChart
 custom:showText="true"
 custom:labelPosition="left" />
</LinearLayout>

为了避免输入长串的namespace名字，示例上面使用了xmlns指令，这个指令可以指派custom作为http://schemas.android.com/apk/res/com.example.customviewsnamespace的别名。你也可以选择其他的别名作为你的namespace。

请注意，如果你的view是一个inner class，你必须指定这个view的outer class。同样的，如果PieChart有一个inner class叫做PieView。为了使用这个类中自设的属性，你应该使用com.example.customviews.charting.PieChart$PieView.

4.在运行时获取属性值
当view从XML layout被创建的时候，在xml标签下的属性值都是从resource下读取出来并传递到view的constructor作为一个AttributeSet参数。尽管可以从AttributeSet中直接读取数值，可是这样做有些弊端：

拥有属性的资源并没有经过分解Styles并没有运用上
取而代之的是，通过obtainStyledAttributes()来获取属性值。这个方法会传递一个TypedArray对象，它是间接referenced并且styled的。

Android资源编译器帮你做了许多工作来使调用obtainStyledAttributes())更简单。对res目录里的每一个<declare-styleable>资源，自动生成的R.java文件定义了存放属性ID的数组和常量，常量用来索引数组中每个属性。你可以使用这些预先定义的常量来从TypedArray中读取属性。这里就是PieChart类如何读取它的属性:

public PieChart(Context context, AttributeSet attrs) {
 super(context, attrs);
 TypedArray a = context.getTheme().obtainStyledAttributes(
 attrs,
 R.styleable.PieChart,
 0, 0);

 try {
 mShowText = a.getBoolean(R.styleable.PieChart_showText, false);
 mTextPos = a.getInteger(R.styleable.PieChart_labelPosition, 0);
 } finally {
a.recycle();
 }
}
清注意TypedArray对象是一个shared资源，必须被在使用后进行回收。

5.把获取到的属性值应用在你的view上
Attributes是一个强大的控制view的行为与外观的方法，但是他们仅仅能够在view被初始化的时候被读取到。为了提供一个动态的行为，需要暴露出一些合适的getter 与setter方法。下面的代码演示了如何使用这个技巧:

public boolean isShowText() {
 return mShowText;
}

public void setShowText(boolean showText) {
 mShowText = showText;
 invalidate();
 requestLayout();
}

protectedvoidonDraw(Canvas canvas) {
super.onDraw(canvas);
Paint mTextPaint = newPaint();
mTextPaint.setColor(mGreenColor);
mTextPaint.setTextSize(mTextSize);

canvas.drawText(mContent, 100, 100, mTextPaint);
}
请注意，在setShowText方法里面有调用invalidate()) and requestLayout()). 当view的某些内容发生变化的时候，需要调用invalidate来通知系统对这个view进行redraw，当某些元素变化会引起组件大小变化时，需要调用requestLayout方法。

自定义的view也需要能够支持响应事件的监听器。例如，PieChart暴露了一个自设的事件OnCurrentItemChanged来通知监听器，用户已经切换了焦点到一个新的组件上。

我们很容易忘记了暴露属性与事件，特别是当你是这个view的唯一用户时。请花费一些时间来仔细定义你的view的交互。一个好的规则是总是暴露任何属性与事件。
